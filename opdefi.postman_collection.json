{
	"info": {
		"_postman_id": "e96b9219-dcc9-472d-bf64-e6a81fd646a4",
		"name": "opdefi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7335624"
	},
	"item": [
		{
			"name": "localhost:8000/order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 500\", function () {",
							"    pm.expect(pm.response.code).to.equal(500);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'detail'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.detail).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Detail is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.detail).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Detail should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ticker\": \"MSFT\",\n    \"uid\": \"544\",\n    \"value\":\"251\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/order",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8000/cancel_order?uid=544&ticker=AAPL&ordertype=1&val=25",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required Content-Type header with value application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Message field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Message field is in the expected format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.be.a('string');",
							"  // Add more specific validations for the expected format of the message field if needed",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "uid",
						"value": "1234",
						"type": "text",
						"disabled": true
					},
					{
						"key": "ticker",
						"value": "MSFT",
						"type": "text",
						"disabled": true
					},
					{
						"key": "value",
						"value": "432",
						"type": "text",
						"disabled": true
					},
					{
						"key": "ordertype",
						"value": "buy",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"uid\":\"1234\",\n    \"ticker\":\"MSFT\",\n    \"val\":\"432\",\n    \"ordertype\" : \"buy\"\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/cancel_order?uid=544&ticker=AAPL&ordertype=1&val=25",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"cancel_order"
					],
					"query": [
						{
							"key": "uid",
							"value": "544"
						},
						{
							"key": "ticker",
							"value": "AAPL"
						},
						{
							"key": "ordertype",
							"value": "1"
						},
						{
							"key": "val",
							"value": "25"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8000/get_orders_uid?uid=544",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required Content-Type header with value application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Buy and sell orders arrays are present for each stock symbol\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    ",
							"    Object.keys(responseData).forEach(function(key) {",
							"        pm.expect(responseData[key].buy_orders).to.exist.and.to.be.an('array');",
							"        pm.expect(responseData[key].sell_orders).to.exist.and.to.be.an('array');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is within acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8000/get_orders_uid?uid=544",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"get_orders_uid"
					],
					"query": [
						{
							"key": "uid",
							"value": "544"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8000/get_orders_ticker?ticker=MSFT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"B_L array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    // pm.expect(responseData[0].B_L).to.exist.and.to.be.an('array').with.lengthOf.at.least(1);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "ticker",
						"value": "MSFT",
						"type": "text"
					}
				],
				"url": {
					"raw": "localhost:8000/get_orders_ticker?ticker=MSFT",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"get_orders_ticker"
					],
					"query": [
						{
							"key": "ticker",
							"value": "MSFT"
						}
					]
				}
			},
			"response": []
		}
	]
}